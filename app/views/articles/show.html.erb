<h1><%= @article.title %></h1>

<h1><%= @article.body %></h1>

<ul>
  <li><%= link_to "Edit", edit_article_path(@article) %></li>
  <%# The method: :delete option causes the link to make a DELETE request instead of a GET request. 
      The data: { confirm: "Are you sure?" } option causes a confirmation dialog to appear when the link is clicked.%>
  <li><%= link_to "Destroy", article_path(@article),
                method: :delete,
                data: { confirm: "Are you sure?" } %></li>
</ul>

<h2>Comments</h2>
<%= render @article.comments %>
<%# This will now render the partial in app/views/comments/_comment.html.erb once for each comment that is in the @article.comments collection. 
      As the render method iterates over the @article.comments collection, it assigns each comment to a local variable named the same as the partial, 
      in this case comment, which is then available in the partial for us to show.%>


<h2>Add a comment:</h2>
<%= render 'comments/form' %>
<%# The second render just defines the partial template we want to render, comments/form. 
      Rails is smart enough to spot the forward slash in that string and realize that you want 
      to render the _form.html.erb file in the app/views/comments directory.

    The @article object is available to any partials rendered in the view because we defined it as an instance variable.%>